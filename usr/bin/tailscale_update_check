#!/bin/sh

set -e

# --- Configuration ---
BIN_DIR="/opt/tailscale"
VERSION_FILE="${BIN_DIR}/version"
LOG_TAG="tailscale_update" # for logger

# --- Helper Functions ---

# log recoord
log_info() {
    echo "$1" 
    logger -t "$LOG_TAG" -p daemon.info "$1"
}
log_error() {
    echo "Error: $1" >&2 
    logger -t "$LOG_TAG" -p daemon.error "Error: $1"
}

# get architecture
get_arch() {
    arch=$(uname -m)
    endianness=""
    if [ "$arch" = "mips" ]; then
        if echo -n I | hexdump -o | grep -q '0001'; then endianness="le"; fi
    elif [ "$arch" = "armv7l" ]; then arch=arm
    elif [ "$arch" = "aarch64" ]; then arch=arm64
    elif [ "$arch" = "x86_64" ]; then arch=amd64
    fi
    echo "${arch}${endianness}"
}

# (version_gt V1 V2 -> returns 0 if V1 > V2)
version_gt() {
    # Use awk for robust comparison
    awk -v v1="$1" -v v2="$2" 'BEGIN {
        split(v1, a, "."); split(v2, b, ".");
        for (i=1; i<=3; i++) {
            a[i] = a[i] + 0; # Convert to number
            b[i] = b[i] + 0; # Convert to number
            if (a[i] > b[i]) exit 0; # v1 > v2
            if (a[i] < b[i]) exit 1; # v1 < v2
        }
        exit 1; # v1 == v2 or v1 < v2
    }'
}

# Download and install Tailscale
download_and_install() {
    local target_version="$1"
    local arch_suffix="$2"
    local version_tag="${target_version}_${arch_suffix}"
    local download_url="https://pkgs.tailscale.com/stable/tailscale_${version_tag}.tgz"
    local tmp_dir="/tmp/tailscale_download_$$" # Unique temp dir
    local tarball="/tmp/tailscale_${version_tag}.tgz"

    log_info "Downloading Tailscale ${target_version} (${version_tag})..."
    log_info "Source: ${download_url}"

    # Download with progress bar displayed
    if ! wget --progress=bar:force -O "$tarball" "$download_url"; then
        log_error "Download failed from $download_url"
        rm -f "$tarball"
        return 1
    fi

    log_info "Extracting..."
    mkdir -p "$tmp_dir"
    # Extract, check for errors
    if ! tar xzf "$tarball" -C "$tmp_dir"; then
        log_error "Extraction failed for $tarball"
        rm -f "$tarball"
        rm -rf "$tmp_dir"
        return 1
    fi

    # Verify extracted files exist
    local extracted_daemon="${tmp_dir}/tailscale_${version_tag}/tailscaled"
    local extracted_cli="${tmp_dir}/tailscale_${version_tag}/tailscale"
    if [ ! -f "$extracted_daemon" ] || [ ! -f "$extracted_cli" ]; then
        log_error "Required files not found in extracted archive."
        rm -f "$tarball"
        rm -rf "$tmp_dir"
        return 1
    fi

    log_info "Installing to ${BIN_DIR}..."
    # Ensure target directory exists
    mkdir -p "$BIN_DIR"
    # Move new binaries into place
    mv "$extracted_daemon" "${BIN_DIR}/tailscaled"
    mv "$extracted_cli" "${BIN_DIR}/tailscale"

    # Update version file *only after successful install*
    echo "$target_version" > "$VERSION_FILE"
    log_info "Successfully installed version $target_version."

    # Cleanup
    rm -f "$tarball"
    rm -rf "$tmp_dir"
    return 0
}

# --- Main Logic ---

# Handle special download-only mode for wrappers
if [ "$1" = "--download-only" ]; then
    log_info "Download-only mode triggered."
    CURRENT_ARCH=$(get_arch)
    if [ -z "$CURRENT_ARCH" ]; then
        log_error "Cannot determine architecture."
        exit 1
    fi
    
    log_info "Detected architecture: $CURRENT_ARCH"
    log_info "Fetching latest version information..."
    
    # Attempt to get the latest version for initial download
    LATEST_VERSION=$(wget -qO- https://pkgs.tailscale.com/stable/ | grep -o 'tailscale_[0-9.]*_' | head -1 | sed 's/tailscale_//;s/_$//')
    if [ -z "$LATEST_VERSION" ]; then
        log_error "Cannot fetch latest version for initial download."
        log_error "Please check your internet connection and try again."
        exit 1
    fi
    
    log_info "Latest version available: $LATEST_VERSION"
    log_info "Starting download and installation process..."
    
    if download_and_install "$LATEST_VERSION" "$CURRENT_ARCH"; then
        log_info "Installation completed successfully."
        exit 0
    else
        log_error "Installation failed. Check network connection and try again."
        exit 1
    fi
fi

# --- Regular Update Check ---

log_info "Starting update check..."

# 1. Get Current Installed Version
current_version="0.0.0" # Assume very old if no version file
if [ -f "$VERSION_FILE" ]; then
    current_version=$(cat "$VERSION_FILE")
    # Basic validation
    if ! echo "$current_version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
        log_info "Invalid version format '$current_version' in $VERSION_FILE. Assuming 0.0.0"
        current_version="0.0.0"
    fi
else
    log_info "Version file $VERSION_FILE not found. Will attempt to install latest."
fi
log_info "Current installed version: $current_version"

# 2. Get Latest Stable Version
latest_version=$(wget -qO- https://pkgs.tailscale.com/stable/ | grep -o 'tailscale_[0-9.]*_' | head -1 | sed 's/tailscale_//;s/_$//')
if [ -z "$latest_version" ]; then
    log_error "Failed to fetch latest version from pkgs.tailscale.com."
    exit 1
fi
# Basic validation
if ! echo "$latest_version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
    log_error "Fetched invalid latest version format: $latest_version"
    exit 1
fi
log_info "Latest stable version: $latest_version"

# 3. Compare Versions
if version_gt "$latest_version" "$current_version"; then
    log_info "New version available ($latest_version > $current_version). Proceeding with update."
else
    log_info "Current version ($current_version) is up to date."
    exit 0
fi

# 4. Perform Update
CURRENT_ARCH=$(get_arch)
if [ -z "$CURRENT_ARCH" ]; then
    log_error "Cannot determine architecture for update."
    exit 1
fi

log_info "Attempting to stop Tailscale service before update..."
# Use init script to stop, ignore errors if already stopped
/etc/init.d/tailscale stop || log_info "Service might already be stopped."
# Add an extra kill just in case procd didn't stop it cleanly
sleep 1 # Give procd a moment
killall tailscaled 2>/dev/null || pkill -f /opt/tailscale/tailscaled 2>/dev/null || log_info "No running tailscaled process found to kill."
sleep 1

if download_and_install "$latest_version" "$CURRENT_ARCH"; then
    log_info "Update successful. Attempting to start Tailscale service..."
    if /etc/init.d/tailscale start; then
        log_info "Tailscale service started successfully."
    else
        log_error "Failed to start Tailscale service after update."
        exit 1 # Indicate failure if start fails
    fi
else
    log_error "Update failed during download/install."
    # Attempt to restart the service even if update failed, maybe old version still works
    log_info "Attempting to restart Tailscale service with potentially old version..."
    /etc/init.d/tailscale start || log_info "Failed to restart service."
    exit 1 # Indicate update failure
fi

log_info "Update check finished."
exit 0
